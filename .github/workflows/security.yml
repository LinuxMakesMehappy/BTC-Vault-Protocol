name: Security Audit Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-security:
    name: Rust Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          programs/vault/target
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Install cargo-deny
      run: cargo install cargo-deny
    
    - name: Install cargo-geiger (unsafe code detector)
      run: cargo install cargo-geiger
    
    - name: Run cargo audit (vulnerability scan)
      run: |
        cd programs/vault
        cargo audit --json > ../../audit-report.json || true
        cargo audit
    
    - name: Run cargo deny (license and security policy)
      run: |
        cd programs/vault
        cargo deny check
    
    - name: Detect unsafe code blocks
      run: |
        cd programs/vault
        cargo geiger --format json > ../../geiger-report.json || true
        cargo geiger
    
    - name: Check for hardcoded secrets
      run: |
        # Check for common secret patterns
        grep -r -E "(password|secret|key|token|api_key)" --include="*.rs" programs/vault/src/ || true
        grep -r -E "['\"][0-9a-fA-F]{32,}['\"]" --include="*.rs" programs/vault/src/ || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: rust-security-reports
        path: |
          audit-report.json
          geiger-report.json

  python-security:
    name: Python Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install safety bandit semgrep pip-audit
    
    - name: Run Safety (vulnerability scan)
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run Bandit (security linter)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll
    
    - name: Run pip-audit (dependency vulnerabilities)
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit
    
    - name: Run Semgrep (static analysis)
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .
    
    - name: Check for hardcoded secrets in Python
      run: |
        grep -r -E "(password|secret|key|token|api_key)" --include="*.py" . || true
        grep -r -E "['\"][0-9a-fA-F]{32,}['\"]" --include="*.py" . || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: python-security-reports
        path: |
          safety-report.json
          bandit-report.json
          pip-audit-report.json
          semgrep-report.json

  frontend-security:
    name: Frontend Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > ../npm-audit-report.json || true
        npm audit --audit-level=moderate
    
    - name: Install ESLint security plugin
      run: |
        cd frontend
        npm install --save-dev eslint-plugin-security
    
    - name: Run security linting
      run: |
        cd frontend
        npx eslint . --ext .ts,.tsx,.js,.jsx --format json --output-file ../eslint-security-report.json || true
        npx eslint . --ext .ts,.tsx,.js,.jsx
    
    - name: Check for hardcoded secrets in frontend
      run: |
        grep -r -E "(password|secret|key|token|api_key)" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" frontend/ || true
        grep -r -E "['\"][0-9a-fA-F]{32,}['\"]" --include="*.ts" --include="*.tsx" frontend/ || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: frontend-security-reports
        path: |
          npm-audit-report.json
          eslint-security-report.json

  solana-security:
    name: Solana Program Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v1.16.25/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
    
    - name: Install Anchor CLI
      run: npm install -g @coral-xyz/anchor-cli@0.29.0
    
    - name: Build program
      run: |
        cd programs/vault
        anchor build
    
    - name: Check program size (prevent bloat attacks)
      run: |
        cd programs/vault
        PROGRAM_SIZE=$(wc -c < target/deploy/vault.so)
        echo "Program size: $PROGRAM_SIZE bytes"
        if [ $PROGRAM_SIZE -gt 1048576 ]; then  # 1MB limit
          echo "ERROR: Program size exceeds 1MB limit"
          exit 1
        fi
    
    - name: Verify program deterministic build
      run: |
        cd programs/vault
        anchor build
        HASH1=$(sha256sum target/deploy/vault.so | cut -d' ' -f1)
        anchor clean
        anchor build
        HASH2=$(sha256sum target/deploy/vault.so | cut -d' ' -f1)
        echo "Build 1 hash: $HASH1"
        echo "Build 2 hash: $HASH2"
        if [ "$HASH1" != "$HASH2" ]; then
          echo "ERROR: Non-deterministic build detected"
          exit 1
        fi
    
    - name: Check for dangerous Solana patterns
      run: |
        cd programs/vault/src
        # Check for unsafe account access patterns
        grep -r "unchecked" . || true
        grep -r "unsafe" . || true
        grep -r "transmute" . || true
        # Check for missing owner checks
        grep -r "Account::" . | grep -v "owner" || true
        # Check for missing signer checks
        grep -r "Signer" . || echo "WARNING: No signer checks found"

  cryptography-audit:
    name: Cryptography Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cryptography analysis tools
      run: |
        pip install cryptography-vectors
        cargo install cargo-audit
    
    - name: Audit cryptographic implementations
      run: |
        # Check for weak cryptographic patterns
        grep -r -E "(md5|sha1|des|rc4)" --include="*.rs" programs/vault/src/ || true
        grep -r -E "(rand::random|thread_rng)" --include="*.rs" programs/vault/src/ || true
        
        # Check for proper entropy sources
        grep -r -E "(OsRng|ChaCha20Rng)" --include="*.rs" programs/vault/src/ || echo "WARNING: No secure RNG found"
        
        # Check for constant-time operations
        grep -r -E "(subtle::)" --include="*.rs" programs/vault/src/ || echo "WARNING: No constant-time operations found"
    
    - name: Verify ECDSA implementation
      run: |
        cd programs/vault
        # Run specific cryptographic tests
        cargo test --lib test_validate_ecdsa_proof_valid
        cargo test --lib test_anti_replay_attack

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'rust', 'python', 'typescript' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  security-scorecard:
    name: OSSF Security Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      actions: read
      contents: read
    
    steps:
    - name: "Checkout code"
      uses: actions/checkout@v4
      with:
        persist-credentials: false
    
    - name: "Run analysis"
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true
    
    - name: "Upload to code-scanning"
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [rust-security, python-security, frontend-security, solana-security, cryptography-audit]
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all security reports
      uses: actions/download-artifact@v3
    
    - name: Generate security summary
      run: |
        echo "# 🛡️ Security Audit Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Audit Date:** $(date -u)" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## 🦀 Rust Security" >> security-summary.md
        if [ -f rust-security-reports/audit-report.json ]; then
          echo "- ✅ Cargo audit completed" >> security-summary.md
        else
          echo "- ❌ Cargo audit failed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## 🐍 Python Security" >> security-summary.md
        if [ -f python-security-reports/safety-report.json ]; then
          echo "- ✅ Safety scan completed" >> security-summary.md
        else
          echo "- ❌ Safety scan failed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## ⚛️ Frontend Security" >> security-summary.md
        if [ -f frontend-security-reports/npm-audit-report.json ]; then
          echo "- ✅ NPM audit completed" >> security-summary.md
        else
          echo "- ❌ NPM audit failed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## 🔐 Cryptography Audit" >> security-summary.md
        echo "- ✅ ECDSA implementation verified" >> security-summary.md
        echo "- ✅ Anti-replay mechanisms tested" >> security-summary.md
        
        cat security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md