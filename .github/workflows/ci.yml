name: Vault Protocol CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  SOLANA_VERSION: 1.16.25

jobs:
  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          programs/vault/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
    
    - name: Install Anchor CLI
      run: |
        npm install -g @coral-xyz/anchor-cli@0.29.0
    
    - name: Check Rust formatting
      run: cargo fmt --all --manifest-path programs/vault/Cargo.toml -- --check
    
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features --manifest-path programs/vault/Cargo.toml -- -D warnings
    
    - name: Run Rust unit tests
      run: cargo test --manifest-path programs/vault/Cargo.toml --lib
    
    - name: Build Solana program
      run: |
        cd programs/vault
        anchor build
    
    - name: Run integration tests
      run: |
        cd programs/vault
        anchor test --skip-local-validator

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Python tests
      run: python -m pytest tests/ -v --tb=short
    
    - name: Generate test coverage
      run: |
        pip install pytest-cov
        python -m pytest tests/ --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run TypeScript checks
      run: |
        cd frontend
        npm run type-check
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run comprehensive security audit
      run: |
        chmod +x scripts/security-audit.sh
        ./scripts/security-audit.sh
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          security-audit-report.md
          rust-audit.json
          safety-report.json
          bandit-report.json