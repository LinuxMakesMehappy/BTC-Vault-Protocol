'use client'; \n\nimport React, { useState, useEffect } from 'react'; \nimport { useI18n } from './I18nProvider'; \nimport { \n  WalletIcon, \n  QrCodeIcon, \n  DevicePhoneMobileIcon, \n  CheckCircleIcon, \n  ExclamationTriangleIcon\n } from '@heroicons/react/24/outline'; \nimport toast from 'react-hot-toast'; \nimport { motion } from 'framer-motion'; \nimport QRCode from 'qrcode'; \n\ninterface BlueWalletConnectorProps { \n  onConnect ?: (address: string) => void; \n  onDisconnect ?: () => void; \n } \n\ninterface BlueWalletConnection { \n  address: string; \n  balance: number; \n  connected: boolean; \n  lastSync: number; \n } \n\nexport function BlueWalletConnector({ onConnect, onDisconnect }: BlueWalletConnectorProps) { \n  const { t } = useI18n(); \n  const [connection, setConnection] = useState<BlueWalletConnection | null>(null); \n  const [connecting, setConnecting] = useState(false); \n  const [qrCode, setQrCode] = useState<string>(''); \n  const [showQR, setShowQR] = useState(false); \n  const [connectionId, setConnectionId] = useState<string>(''); \n\n  useEffect(() => { \n    // Check for existing BlueWallet connection\n    const savedConnection = localStorage.getItem('bluewallet-connection');\n    if (savedConnection) {\n      try {\n        const parsed = JSON.parse(savedConnection);\n        setConnection(parsed);\n      } catch (error) {\n        console.error('Failed to parse saved BlueWallet connection:', error);\n      }\n    }\n  }, []);\n\n  const generateConnectionQR = async () => {\n    const connectionData = {\n      type: 'vault-bluewallet-connect',\n      id: Math.random().toString(36).substring(7),\n      timestamp: Date.now(),\n      callback: `${window.location.origin}/api/bluewallet/connect`\n    };\n\n    setConnectionId(connectionData.id);\n    \n    try {\n      const qrDataUrl = await QRCode.toDataURL(JSON.stringify(connectionData), {\n        width: 256,\n        margin: 2,\n        color: {\n          dark: '#1f2937',\n          light: '#ffffff'\n        }\n      });\n      setQrCode(qrDataUrl);\n    } catch (error) {\n      console.error('Failed to generate QR code:', error);\n      toast.error('Failed to generate connection QR code');\n    }\n  };\n\n  const handleConnect = async () => {\n    setConnecting(true);\n    setShowQR(true);\n    \n    try {\n      await generateConnectionQR();\n      \n      // Start polling for connection\n      const pollInterval = setInterval(async () => {\n        try {\n          const response = await fetch(`/api/bluewallet/status/${connectionId}`);\n          const data = await response.json();\n          \n          if (data.connected) {\n            clearInterval(pollInterval);\n            const newConnection: BlueWalletConnection = {\n              address: data.address,\n              balance: data.balance || 0,\n              connected: true,\n              lastSync: Date.now()\n            };\n            \n            setConnection(newConnection);\n            localStorage.setItem('bluewallet-connection', JSON.stringify(newConnection));\n            setConnecting(false);\n            setShowQR(false);\n            \n            toast.success('BlueWallet connected successfully!');\n            onConnect?.(data.address);\n          }\n        } catch (error) {\n          console.error('Connection polling error:', error);\n        }\n      }, 2000);\n      \n      // Timeout after 2 minutes\n      setTimeout(() => {\n        clearInterval(pollInterval);\n        if (connecting) {\n          setConnecting(false);\n          setShowQR(false);\n          toast.error('Connection timeout. Please try again.');\n        }\n      }, 120000);\n      \n    } catch (error) {\n      console.error('Failed to initiate BlueWallet connection:', error);\n      toast.error('Failed to connect to BlueWallet');\n      setConnecting(false);\n      setShowQR(false);\n    }\n  };\n\n  const handleDisconnect = () => {\n    setConnection(null);\n    localStorage.removeItem('bluewallet-connection');\n    toast.success('BlueWallet disconnected');\n    onDisconnect?.();\n  };\n\n  const syncBalance = async () => {\n    if (!connection) return;\n    \n    try {\n      const response = await fetch(`/api/bluewallet/balance/${connection.address}`);\n      const data = await response.json();\n      \n      const updatedConnection = {\n        ...connection,\n        balance: data.balance,\n        lastSync: Date.now()\n      };\n      \n      setConnection(updatedConnection);\n      localStorage.setItem('bluewallet-connection', JSON.stringify(updatedConnection));\n      toast.success('Balance updated');\n    } catch (error) {\n      console.error('Failed to sync balance:', error);\n      toast.error('Failed to sync balance');\n    }\n  };\n\n  if (connection?.connected) {\n    return (\n      <motion.div \n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\"\n      >\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center\">\n              <DevicePhoneMobileIcon className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                BlueWallet\n              </h3>\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircleIcon className=\"w-4 h-4 text-green-500\" />\n                <span className=\"text-sm text-green-500\">Connected</span>\n              </div>\n            </div>\n          </div>\n          \n          <button\n            onClick={handleDisconnect}\n            className=\"px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors\"\n          >\n            Disconnect\n          </button>\n        </div>\n\n        {/* Wallet Address */}\n        <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n              Bitcoin Address\n            </span>\n            <button\n              onClick={() => {\n                navigator.clipboard.writeText(connection.address);\n                toast.success(t('common.copied'));\n              }}\n              className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\n            >\n              Copy\n            </button>\n          </div>\n          <p className=\"font-mono text-sm text-gray-900 dark:text-white mt-1\">\n            {`${connection.address.slice(0, 12)}...${connection.address.slice(-12)}`}\n          </p>\n        </div>\n\n        {/* Balance */}\n        <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n              BTC Balance\n            </span>\n            <button\n              onClick={syncBalance}\n              className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\n            >\n              Sync\n            </button>\n          </div>\n          <p className=\"font-mono text-lg font-semibold text-gray-900 dark:text-white mt-1\">\n            {(connection.balance / 100000000).toFixed(8)} BTC\n          </p>\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n            Last synced: {new Date(connection.lastSync).toLocaleTimeString()}\n          </p>\n        </div>\n\n        {/* Features */}\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n          <h4 className=\"text-sm font-medium text-blue-900 dark:text-blue-100 mb-2\">\n            Available Features\n          </h4>\n          <ul className=\"text-sm text-blue-700 dark:text-blue-200 space-y-1\">\n            <li>• BTC commitment verification</li>\n            <li>• Lightning Network payments</li>\n            <li>• Transaction signing</li>\n            <li>• Balance monitoring</li>\n          </ul>\n        </div>\n      </motion.div>\n    );\n  }\n\n  return (\n    <motion.div \n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\"\n    >\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <DevicePhoneMobileIcon className=\"w-8 h-8 text-white\" />\n        </div>\n        \n        <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n          Connect BlueWallet\n        </h3>\n        \n        <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n          Connect your BlueWallet to manage Bitcoin commitments and Lightning payments\n        </p>\n\n        {showQR ? (\n          <div className=\"space-y-4\">\n            <div className=\"bg-white p-4 rounded-lg border-2 border-gray-200 inline-block\">\n              {qrCode ? (\n                <img src={qrCode} alt=\"Connection QR Code\" className=\"w-64 h-64\" />\n              ) : (\n                <div className=\"w-64 h-64 bg-gray-100 rounded-lg flex items-center justify-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-2\">\n                Scan this QR code with BlueWallet\n              </p>\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm text-blue-600\">Waiting for connection...</span>\n              </div>\n            </div>\n            \n            <button\n              onClick={() => {\n                setShowQR(false);\n                setConnecting(false);\n              }}\n              className=\"px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors\"\n            >\n              Cancel\n            </button>\n          </div>\n        ) : (\n          <button\n            onClick={handleConnect}\n            disabled={connecting}\n            className=\"px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg font-medium transition-colors flex items-center space-x-2 mx-auto\"\n          >\n            <QrCodeIcon className=\"w-5 h-5\" />\n            <span>{connecting ? 'Connecting...' : 'Connect with QR Code'}</span>\n          </button>\n        )}\n\n        <div className=\"mt-6 text-left\">\n          <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">\n            How to connect:\n          </h4>\n          <ol className=\"text-sm text-gray-600 dark:text-gray-300 space-y-1\">\n            <li>1. Open BlueWallet on your mobile device</li>\n            <li>2. Tap the scan QR code button</li>\n            <li>3. Scan the QR code displayed above</li>\n            <li>4. Approve the connection in BlueWallet</li>\n          </ol>\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n"