'use client'; \n\nimport React, { createContext, useContext, useState, useEffect } from 'react'; \nimport { useTranslation } from 'react-i18next'; \nimport '../lib/i18n'; // Initialize i18n\n\ntype Language = 'en' | 'es' | 'zh' | 'ja';\n\ninterface I18nContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string, options?: any) => string;\n}\n\nconst I18nContext = createContext<I18nContextType | undefined>(undefined);\n\nexport function I18nProvider({ children }: { children: React.ReactNode }) {\n  const { t, i18n } = useTranslation('common');\n  const [language, setLanguageState] = useState<Language>('en');\n\n  useEffect(() => {\n    // Load saved language preference\n    const savedLang = localStorage.getItem('vault-language') as Language;\n    if (savedLang && ['en', 'es', 'zh', 'ja'].includes(savedLang)) {\n      setLanguageState(savedLang);\n      i18n.changeLanguage(savedLang);\n    }\n  }, [i18n]);\n\n  const setLanguage = (lang: Language) => {\n    setLanguageState(lang);\n    i18n.changeLanguage(lang);\n    localStorage.setItem('vault-language', lang);\n    \n    // Update document language attribute\n    document.documentElement.lang = lang;\n  };\n\n  return (\n    <I18nContext.Provider value={{\n      language,\n      setLanguage,\n      t,\n    }}>\n      {children}\n    </I18nContext.Provider>\n  );\n}\n\nexport function useI18n() {\n  const context = useContext(I18nContext);\n  if (context === undefined) {\n    throw new Error('useI18n must be used within an I18nProvider');\n  }\n  return context;\n}\n"