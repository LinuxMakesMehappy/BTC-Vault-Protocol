'use client'; \n\nimport React, { createContext, useContext, useEffect, useState } from 'react'; \n\ntype Theme = 'light' | 'dark'; \n\ninterface ThemeContextType { \n  theme: Theme; \n  toggleTheme: () => void; \n } \n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined); \n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) { \n  const [theme, setTheme] = useState<Theme>('dark'); \n\n  useEffect(() => { \n    // Check for saved theme preference or default to 'dark'\n    const savedTheme = localStorage.getItem('vault-theme') as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    // Apply theme to document\n    document.documentElement.classList.remove('light', 'dark');\n    document.documentElement.classList.add(theme);\n    localStorage.setItem('vault-theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n"