'use client'; \n\nimport React, { useState, useEffect } from 'react'; \nimport { useWallet } from '@solana/wallet-adapter-react'; \nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui'; \nimport { useI18n } from './I18nProvider'; \nimport { useVault } from './WalletProvider'; \nimport { \n  WalletIcon, \n  ShieldCheckIcon, \n  ExclamationTriangleIcon, \n  CheckCircleIcon, \n  XCircleIcon\n } from '@heroicons/react/24/outline'; \nimport toast from 'react-hot-toast'; \nimport { motion, AnimatePresence } from 'framer-motion'; \n\ninterface WalletConnectorProps { \n  onConnect ?: () => void; \n  onDisconnect ?: () => void; \n  showBalance ?: boolean; \n  compact ?: boolean; \n } \n\nexport function WalletConnector({ \n  onConnect, \n  onDisconnect, \n  showBalance = true, \n  compact = false \n }: WalletConnectorProps) { \n  const { connected, connecting, publicKey, wallet } = useWallet(); \n  const { client, walletState, isLoading } = useVault(); \n  const { t } = useI18n(); \n  const [balance, setBalance] = useState<number>(0); \n  const [loadingBalance, setLoadingBalance] = useState(false); \n\n  // Load wallet balance when connected\n  useEffect(() => {\n    if (connected && client && publicKey && showBalance) {\n      loadBalance();\n    }\n  }, [connected, client, publicKey, showBalance]);\n\n  const loadBalance = async () => {\n    if (!client) return;\n    \n    setLoadingBalance(true);\n    try {\n      const walletBalance = await client.getBalance();\n      setBalance(walletBalance);\n    } catch (error) {\n      console.error('Failed to load balance:', error);\n      toast.error('Failed to load wallet balance');\n    } finally {\n      setLoadingBalance(false);\n    }\n  };\n\n  const handleConnect = () => {\n    onConnect?.();\n  };\n\n  const handleDisconnect = () => {\n    onDisconnect?.();\n  };\n\n  const getWalletIcon = () => {\n    if (!wallet) return <WalletIcon className=\"w-5 h-5\" />;\n    \n    // Map wallet types to appropriate icons\n    const walletName = wallet.adapter.name.toLowerCase();\n    if (walletName.includes('phantom')) {\n      return <div className=\"w-5 h-5 bg-purple-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">P</div>;\n    }\n    if (walletName.includes('solflare')) {\n      return <div className=\"w-5 h-5 bg-orange-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">S</div>;\n    }\n    if (walletName.includes('ledger')) {\n      return <ShieldCheckIcon className=\"w-5 h-5 text-blue-500\" />;\n    }\n    if (walletName.includes('blue')) {\n      return <div className=\"w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">B</div>;\n    }\n    \n    return <WalletIcon className=\"w-5 h-5\" />;\n  };\n\n  const getConnectionStatus = () => {\n    if (connecting || isLoading) {\n      return {\n        icon: <div className=\"w-4 h-4 border-2 border-yellow-500 border-t-transparent rounded-full animate-spin\" />,\n        text: t('wallet.connecting'),\n        color: 'text-yellow-500'\n      };\n    }\n    \n    if (connected) {\n      return {\n        icon: <CheckCircleIcon className=\"w-4 h-4 text-green-500\" />,\n        text: t('wallet.connected'),\n        color: 'text-green-500'\n      };\n    }\n    \n    return {\n      icon: <XCircleIcon className=\"w-4 h-4 text-gray-400\" />,\n      text: t('wallet.disconnected'),\n      color: 'text-gray-400'\n    };\n  };\n\n  if (compact) {\n    return (\n      <div className=\"flex items-center space-x-2\">\n        {getWalletIcon()}\n        <WalletMultiButton className=\"!bg-blue-600 hover:!bg-blue-700 !text-sm !py-2 !px-3\" />\n      </div>\n    );\n  }\n\n  return (\n    <motion.div \n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\"\n    >\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          {getWalletIcon()}\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              {t('wallet.title')}\n            </h3>\n            <div className=\"flex items-center space-x-2\">\n              {getConnectionStatus().icon}\n              <span className={`text-sm ${getConnectionStatus().color}`}>\n                {getConnectionStatus().text}\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        <WalletMultiButton \n          className=\"!bg-blue-600 hover:!bg-blue-700\"\n          onClick={connected ? handleDisconnect : handleConnect}\n        />\n      </div>\n\n      <AnimatePresence>\n        {connected && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"space-y-4\"\n          >\n            {/* Wallet Address */}\n            <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  {t('wallet.address')}\n                </span>\n                <button\n                  onClick={() => {\n                    if (publicKey) {\n                      navigator.clipboard.writeText(publicKey.toString());\n                      toast.success(t('common.copied'));\n                    }\n                  }}\n                  className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\n                >\n                  {t('wallet.copy_address')}\n                </button>\n              </div>\n              <p className=\"font-mono text-sm text-gray-900 dark:text-white mt-1\">\n                {publicKey ? `${publicKey.toString().slice(0, 8)}...${publicKey.toString().slice(-8)}` : ''}\n              </p>\n            </div>\n\n            {/* Wallet Balance */}\n            {showBalance && (\n              <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    {t('wallet.balance')}\n                  </span>\n                  <button\n                    onClick={loadBalance}\n                    disabled={loadingBalance}\n                    className=\"text-blue-600 hover:text-blue-700 text-sm font-medium disabled:opacity-50\"\n                  >\n                    {loadingBalance ? t('common.loading') : 'Refresh'}\n                  </button>\n                </div>\n                <p className=\"font-mono text-lg font-semibold text-gray-900 dark:text-white mt-1\">\n                  {loadingBalance ? (\n                    <div className=\"w-20 h-6 bg-gray-300 dark:bg-gray-600 rounded animate-pulse\" />\n                  ) : (\n                    `${balance.toFixed(4)} SOL`\n                  )}\n                </p>\n              </div>\n            )}\n\n            {/* Wallet Info */}\n            <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Wallet Type\n                </span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                  {wallet?.adapter.name || 'Unknown'}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between mt-2\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Network\n                </span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                  {walletState.network}\n                </span>\n              </div>\n            </div>\n\n            {/* Security Notice */}\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <ShieldCheckIcon className=\"w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                <div>\n                  <h4 className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n                    Security Notice\n                  </h4>\n                  <p className=\"text-sm text-blue-700 dark:text-blue-200 mt-1\">\n                    Your wallet remains in your control. VaultBTC never has access to your private keys.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n}\n"