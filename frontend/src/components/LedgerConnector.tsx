'use client'; \n\nimport React, { useState, useEffect } from 'react'; \nimport { useI18n } from './I18nProvider'; \nimport { \n  ShieldCheckIcon, \n  ComputerDesktopIcon, \n  CheckCircleIcon, \n  ExclamationTriangleIcon, \n  UsbIcon, \n  LockClosedIcon\n } from '@heroicons/react/24/outline'; \nimport toast from 'react-hot-toast'; \nimport { motion } from 'framer-motion'; \n\ninterface LedgerConnectorProps { \n  onConnect ?: (address: string, deviceInfo: LedgerDeviceInfo) => void; \n  onDisconnect ?: () => void; \n } \n\ninterface LedgerDeviceInfo { \n  model: string; \n  version: string; \n  address: string; \n  publicKey: string; \n  connected: boolean; \n  locked: boolean; \n } \n\ninterface LedgerApp { \n  name: string; \n  version: string; \n  required: boolean; \n } \n\nexport function LedgerConnector({ onConnect, onDisconnect }: LedgerConnectorProps) { \n  const { t } = useI18n(); \n  const [device, setDevice] = useState<LedgerDeviceInfo | null>(null); \n  const [connecting, setConnecting] = useState(false); \n  const [currentStep, setCurrentStep] = useState<string>(''); \n  const [supportedApps] = useState<LedgerApp[]>([\n    { name: 'Bitcoin', version: '2.1.0+', required: true }, \n    { name: 'Solana', version: '1.3.0+', required: false }\n]); \n  const [installedApps, setInstalledApps] = useState<string[]>([]); \n\n  useEffect(() => { \n    // Check for existing Ledger connection\n    const savedDevice = localStorage.getItem('ledger-device');\n    if (savedDevice) {\n      try {\n        const parsed = JSON.parse(savedDevice);\n        setDevice(parsed);\n        setInstalledApps(parsed.installedApps || []);\n      } catch (error) {\n        console.error('Failed to parse saved Ledger device:', error);\n      }\n    }\n  }, []);\n\n  const checkWebUSBSupport = () => {\n    if (!navigator.usb) {\n      toast.error('WebUSB is not supported in this browser. Please use Chrome, Edge, or Opera.');\n      return false;\n    }\n    return true;\n  };\n\n  const connectLedger = async () => {\n    if (!checkWebUSBSupport()) return;\n    \n    setConnecting(true);\n    setCurrentStep('Requesting device access...');\n    \n    try {\n      // Request USB device access\n      const devices = await navigator.usb.requestDevice({\n        filters: [\n          { vendorId: 0x2c97 }, // Ledger vendor ID\n          { vendorId: 0x2581 }  // Alternative Ledger vendor ID\n        ]\n      });\n      \n      if (devices.length === 0) {\n        throw new Error('No Ledger device selected');\n      }\n      \n      const device = devices[0];\n      setCurrentStep('Opening device connection...');\n      \n      // Open device connection\n      await device.open();\n      \n      if (device.configuration === null) {\n        await device.selectConfiguration(1);\n      }\n      \n      await device.claimInterface(0);\n      \n      setCurrentStep('Checking device status...');\n      \n      // Simulate device info retrieval (in real implementation, use Ledger SDK)\n      const deviceInfo: LedgerDeviceInfo = {\n        model: device.productName || 'Ledger Device',\n        version: '2.1.0',\n        address: 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh', // Mock address\n        publicKey: '0279BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798',\n        connected: true,\n        locked: false\n      };\n      \n      setCurrentStep('Checking installed apps...');\n      \n      // Mock app detection\n      const mockInstalledApps = ['Bitcoin', 'Ethereum'];\n      setInstalledApps(mockInstalledApps);\n      \n      setDevice({ ...deviceInfo, installedApps: mockInstalledApps } as any);\n      localStorage.setItem('ledger-device', JSON.stringify({ ...deviceInfo, installedApps: mockInstalledApps }));\n      \n      setConnecting(false);\n      setCurrentStep('');\n      \n      toast.success('Ledger device connected successfully!');\n      onConnect?.(deviceInfo.address, deviceInfo);\n      \n    } catch (error: any) {\n      console.error('Ledger connection error:', error);\n      setConnecting(false);\n      setCurrentStep('');\n      \n      if (error.message.includes('No device selected')) {\n        toast.error('No Ledger device selected. Please select your device and try again.');\n      } else if (error.message.includes('Access denied')) {\n        toast.error('Access denied. Please unlock your Ledger device and try again.');\n      } else {\n        toast.error(`Failed to connect to Ledger: ${error.message}`);\n      }\n    }\n  };\n\n  const disconnectLedger = () => {\n    setDevice(null);\n    setInstalledApps([]);\n    localStorage.removeItem('ledger-device');\n    toast.success('Ledger device disconnected');\n    onDisconnect?.();\n  };\n\n  const signTransaction = async (transaction: string) => {\n    if (!device) {\n      toast.error('No Ledger device connected');\n      return null;\n    }\n    \n    try {\n      setCurrentStep('Please confirm transaction on your Ledger device...');\n      \n      // Simulate transaction signing (in real implementation, use Ledger SDK)\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      const signature = '304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df64e841288bb9b2b6b1d5e1b5e1b5e1b5e1b5e1b5e1b';\n      \n      setCurrentStep('');\n      toast.success('Transaction signed successfully!');\n      \n      return signature;\n    } catch (error: any) {\n      console.error('Transaction signing error:', error);\n      setCurrentStep('');\n      toast.error(`Failed to sign transaction: ${error.message}`);\n      return null;\n    }\n  };\n\n  if (device?.connected) {\n    return (\n      <motion.div \n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\"\n      >\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center\">\n              <ShieldCheckIcon className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                {device.model}\n              </h3>\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircleIcon className=\"w-4 h-4 text-green-500\" />\n                <span className=\"text-sm text-green-500\">Connected</span>\n                {device.locked && (\n                  <>\n                    <LockClosedIcon className=\"w-4 h-4 text-yellow-500\" />\n                    <span className=\"text-sm text-yellow-500\">Locked</span>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          <button\n            onClick={disconnectLedger}\n            className=\"px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors\"\n          >\n            Disconnect\n          </button>\n        </div>\n\n        {/* Device Info */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n            <span className=\"text-sm text-gray-600 dark:text-gray-300\">Firmware Version</span>\n            <p className=\"font-mono text-sm text-gray-900 dark:text-white mt-1\">\n              {device.version}\n            </p>\n          </div>\n          \n          <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600 dark:text-gray-300\">Bitcoin Address</span>\n              <button\n                onClick={() => {\n                  navigator.clipboard.writeText(device.address);\n                  toast.success(t('common.copied'));\n                }}\n                className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\n              >\n                Copy\n              </button>\n            </div>\n            <p className=\"font-mono text-sm text-gray-900 dark:text-white mt-1\">\n              {`${device.address.slice(0, 12)}...${device.address.slice(-12)}`}\n            </p>\n          </div>\n        </div>\n\n        {/* Installed Apps */}\n        <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-4\">\n          <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">\n            Installed Apps\n          </h4>\n          <div className=\"grid grid-cols-2 gap-2\">\n            {supportedApps.map((app) => {\n              const isInstalled = installedApps.includes(app.name);\n              return (\n                <div\n                  key={app.name}\n                  className={`flex items-center space-x-2 p-2 rounded ${\n                    isInstalled \n                      ? 'bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-200'\n                      : 'bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-200'\n                  }`}\n                >\n                  {isInstalled ? (\n                    <CheckCircleIcon className=\"w-4 h-4\" />\n                  ) : (\n                    <ExclamationTriangleIcon className=\"w-4 h-4\" />\n                  )}\n                  <div>\n                    <span className=\"text-sm font-medium\">{app.name}</span>\n                    <p className=\"text-xs opacity-75\">{app.version}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Security Features */}\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n          <h4 className=\"text-sm font-medium text-blue-900 dark:text-blue-100 mb-2\">\n            Hardware Security Features\n          </h4>\n          <ul className=\"text-sm text-blue-700 dark:text-blue-200 space-y-1\">\n            <li>• Secure Element chip protection</li>\n            <li>• Physical transaction confirmation</li>\n            <li>• Private keys never leave device</li>\n            <li>• PIN and passphrase protection</li>\n          </ul>\n        </div>\n\n        {/* Current Step */}\n        {currentStep && (\n          <div className=\"mt-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-4 h-4 border-2 border-yellow-500 border-t-transparent rounded-full animate-spin\" />\n              <span className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                {currentStep}\n              </span>\n            </div>\n          </div>\n        )}\n      </motion.div>\n    );\n  }\n\n  return (\n    <motion.div \n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\"\n    >\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <ShieldCheckIcon className=\"w-8 h-8 text-white\" />\n        </div>\n        \n        <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n          Connect Ledger Hardware Wallet\n        </h3>\n        \n        <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n          Connect your Ledger device for maximum security when managing Bitcoin commitments\n        </p>\n\n        {connecting ? (\n          <div className=\"space-y-4\">\n            <div className=\"w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto\"></div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-2\">\n                {currentStep || 'Connecting to Ledger device...'}\n              </p>\n            </div>\n            \n            <button\n              onClick={() => {\n                setConnecting(false);\n                setCurrentStep('');\n              }}\n              className=\"px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors\"\n            >\n              Cancel\n            </button>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            <button\n              onClick={connectLedger}\n              className=\"px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors flex items-center space-x-2 mx-auto\"\n            >\n              <UsbIcon className=\"w-5 h-5\" />\n              <span>Connect Ledger Device</span>\n            </button>\n\n            <div className=\"text-left\">\n              <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">\n                Before connecting:\n              </h4>\n              <ul className=\"text-sm text-gray-600 dark:text-gray-300 space-y-1\">\n                <li>• Connect your Ledger device via USB</li>\n                <li>• Unlock your device with your PIN</li>\n                <li>• Open the Bitcoin app on your Ledger</li>\n                <li>• Ensure your browser supports WebUSB</li>\n              </ul>\n            </div>\n\n            <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <ExclamationTriangleIcon className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400 mt-0.5\" />\n                <div>\n                  <h4 className=\"text-sm font-medium text-yellow-900 dark:text-yellow-100\">\n                    Browser Compatibility\n                  </h4>\n                  <p className=\"text-sm text-yellow-700 dark:text-yellow-200 mt-1\">\n                    Ledger integration requires Chrome, Edge, or Opera browser with WebUSB support.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </motion.div>\n  );\n}\n"