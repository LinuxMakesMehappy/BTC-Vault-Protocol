'use client'; \n\nimport React from 'react'; \nimport { QueryClient, QueryClientProvider } from 'react-query'; \nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base'; \nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'; \nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui'; \nimport { \n  PhantomWalletAdapter, \n  SolflareWalletAdapter, \n  TorusWalletAdapter, \n } from '@solana/wallet-adapter-wallets'; \nimport { clusterApiUrl } from '@solana/web3.js'; \nimport { I18nextProvider } from 'react-i18next'; \nimport i18n from '../lib/i18n'; \nimport { ThemeProvider } from './ThemeProvider'; \n\n// Import wallet adapter CSS\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\ninterface ProvidersProps {\n  children: React.ReactNode;\n}\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n      retry: 1,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n    },\n  },\n});\n\nexport function Providers({ children }: ProvidersProps) {\n  // Configure Solana network\n  const network = (process.env.NEXT_PUBLIC_SOLANA_NETWORK as WalletAdapterNetwork) || WalletAdapterNetwork.Devnet;\n  const endpoint = React.useMemo(() => clusterApiUrl(network), [network]);\n\n  // Configure wallet adapters\n  const wallets = React.useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n      new SolflareWalletAdapter({ network }),\n      new TorusWalletAdapter(),\n    ],\n    [network]\n  );\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <I18nextProvider i18n={i18n}>\n        <ThemeProvider>\n          <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} autoConnect>\n              <WalletModalProvider>\n                {children}\n              </WalletModalProvider>\n            </WalletProvider>\n          </ConnectionProvider>\n        </ThemeProvider>\n      </I18nextProvider>\n    </QueryClientProvider>\n  );\n}\n"