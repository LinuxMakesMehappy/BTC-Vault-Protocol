'use client'; \n\nimport React, { useState, useEffect } from 'react'; \nimport { useI18n } from './I18nProvider'; \nimport { WalletConnector } from './WalletConnector'; \nimport { BlueWalletConnector } from './BlueWalletConnector'; \nimport { LedgerConnector } from './LedgerConnector'; \nimport { \n  WalletIcon, \n  DevicePhoneMobileIcon, \n  ShieldCheckIcon, \n  Cog6ToothIcon, \n  ExclamationTriangleIcon, \n  CheckCircleIcon\n } from '@heroicons/react/24/outline'; \nimport { motion, AnimatePresence } from 'framer-motion'; \nimport toast from 'react-hot-toast'; \n\ntype WalletType = 'solana' | 'bluewallet' | 'ledger'; \n\ninterface WalletConnection { \n  type: WalletType; \n  address: string; \n  connected: boolean; \n  balance ?: number; \n  lastActivity: number; \n } \n\ninterface WalletManagerProps { \n  onWalletChange ?: (connections: WalletConnection[]) => void; \n  allowMultiple ?: boolean; \n  preferredWallet ?: WalletType; \n } \n\nexport function WalletManager({ \n  onWalletChange, \n  allowMultiple = true, \n  preferredWallet \n }: WalletManagerProps) { \n  const { t } = useI18n(); \n  const [activeTab, setActiveTab] = useState<WalletType>(preferredWallet || 'solana'); \n  const [connections, setConnections] = useState<WalletConnection[]>([]); \n  const [showSettings, setShowSettings] = useState(false); \n\n  useEffect(() => { \n    // Load saved connections\n    const savedConnections = localStorage.getItem('wallet-connections');\n    if (savedConnections) {\n      try {\n        const parsed = JSON.parse(savedConnections);\n        setConnections(parsed);\n      } catch (error) {\n        console.error('Failed to parse saved wallet connections:', error);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    // Save connections and notify parent\n    localStorage.setItem('wallet-connections', JSON.stringify(connections));\n    onWalletChange?.(connections);\n  }, [connections, onWalletChange]);\n\n  const handleWalletConnect = (type: WalletType, address: string, balance?: number) => {\n    const newConnection: WalletConnection = {\n      type,\n      address,\n      connected: true,\n      balance,\n      lastActivity: Date.now()\n    };\n\n    setConnections(prev => {\n      // If multiple wallets not allowed, replace existing connections\n      if (!allowMultiple) {\n        return [newConnection];\n      }\n      \n      // Remove existing connection of same type\n      const filtered = prev.filter(conn => conn.type !== type);\n      return [...filtered, newConnection];\n    });\n\n    toast.success(`${type} wallet connected successfully!`);\n  };\n\n  const handleWalletDisconnect = (type: WalletType) => {\n    setConnections(prev => prev.filter(conn => conn.type !== type));\n    toast.success(`${type} wallet disconnected`);\n  };\n\n  const getWalletIcon = (type: WalletType) => {\n    switch (type) {\n      case 'solana':\n        return <WalletIcon className=\"w-5 h-5\" />;\n      case 'bluewallet':\n        return <DevicePhoneMobileIcon className=\"w-5 h-5\" />;\n      case 'ledger':\n        return <ShieldCheckIcon className=\"w-5 h-5\" />;\n      default:\n        return <WalletIcon className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getWalletName = (type: WalletType) => {\n    switch (type) {\n      case 'solana':\n        return 'Solana Wallets';\n      case 'bluewallet':\n        return 'BlueWallet';\n      case 'ledger':\n        return 'Ledger Hardware';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  const isWalletConnected = (type: WalletType) => {\n    return connections.some(conn => conn.type === type && conn.connected);\n  };\n\n  const tabs = [\n    { id: 'solana' as WalletType, name: 'Solana Wallets', icon: WalletIcon },\n    { id: 'bluewallet' as WalletType, name: 'BlueWallet', icon: DevicePhoneMobileIcon },\n    { id: 'ledger' as WalletType, name: 'Ledger', icon: ShieldCheckIcon }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Connected Wallets Summary */}\n      {connections.length > 0 && (\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircleIcon className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n              <div>\n                <h3 className=\"text-sm font-medium text-green-900 dark:text-green-100\">\n                  {connections.length} Wallet{connections.length > 1 ? 's' : ''} Connected\n                </h3>\n                <p className=\"text-sm text-green-700 dark:text-green-200\">\n                  {connections.map(conn => getWalletName(conn.type)).join(', ')}\n                </p>\n              </div>\n            </div>\n            \n            <button\n              onClick={() => setShowSettings(!showSettings)}\n              className=\"p-2 text-green-600 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300 transition-colors\"\n            >\n              <Cog6ToothIcon className=\"w-5 h-5\" />\n            </button>\n          </div>\n\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                className=\"mt-4 pt-4 border-t border-green-200 dark:border-green-800\"\n              >\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {connections.map((conn, index) => (\n                    <div\n                      key={`${conn.type}-${index}`}\n                      className=\"bg-white dark:bg-gray-800 rounded-lg p-3 border border-gray-200 dark:border-gray-700\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          {getWalletIcon(conn.type)}\n                          <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                            {getWalletName(conn.type)}\n                          </span>\n                        </div>\n                        <button\n                          onClick={() => handleWalletDisconnect(conn.type)}\n                          className=\"text-red-600 hover:text-red-700 text-xs\"\n                        >\n                          Disconnect\n                        </button>\n                      </div>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-300 font-mono\">\n                        {`${conn.address.slice(0, 8)}...${conn.address.slice(-8)}`}\n                      </p>\n                      {conn.balance !== undefined && (\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                          Balance: {conn.balance.toFixed(4)}\n                        </p>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      )}\n\n      {/* Wallet Type Tabs */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\n        <div className=\"border-b border-gray-200 dark:border-gray-700\">\n          <nav className=\"flex space-x-8 px-6\" aria-label=\"Wallet types\">\n            {tabs.map((tab) => {\n              const isActive = activeTab === tab.id;\n              const isConnected = isWalletConnected(tab.id);\n              \n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${\n                    isActive\n                      ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'\n                  }`}\n                >\n                  <tab.icon className=\"w-5 h-5\" />\n                  <span>{tab.name}</span>\n                  {isConnected && (\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  )}\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          <AnimatePresence mode=\"wait\">\n            <motion.div\n              key={activeTab}\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n              transition={{ duration: 0.2 }}\n            >\n              {activeTab === 'solana' && (\n                <WalletConnector\n                  onConnect={() => handleWalletConnect('solana', 'solana-address')}\n                  onDisconnect={() => handleWalletDisconnect('solana')}\n                  showBalance={true}\n                  compact={false}\n                />\n              )}\n              \n              {activeTab === 'bluewallet' && (\n                <BlueWalletConnector\n                  onConnect={(address) => handleWalletConnect('bluewallet', address)}\n                  onDisconnect={() => handleWalletDisconnect('bluewallet')}\n                />\n              )}\n              \n              {activeTab === 'ledger' && (\n                <LedgerConnector\n                  onConnect={(address, deviceInfo) => handleWalletConnect('ledger', address)}\n                  onDisconnect={() => handleWalletDisconnect('ledger')}\n                />\n              )}\n            </motion.div>\n          </AnimatePresence>\n        </div>\n      </div>\n\n      {/* Multiple Wallet Notice */}\n      {!allowMultiple && connections.length > 0 && (\n        <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <ExclamationTriangleIcon className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400 mt-0.5\" />\n            <div>\n              <h4 className=\"text-sm font-medium text-yellow-900 dark:text-yellow-100\">\n                Single Wallet Mode\n              </h4>\n              <p className=\"text-sm text-yellow-700 dark:text-yellow-200 mt-1\">\n                Only one wallet can be connected at a time. Connecting a new wallet will disconnect the current one.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Security Notice */}\n      <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <ShieldCheckIcon className=\"w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n          <div>\n            <h4 className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n              Security Best Practices\n            </h4>\n            <ul className=\"text-sm text-blue-700 dark:text-blue-200 mt-1 space-y-1\">\n              <li>• Always verify transaction details before signing</li>\n              <li>• Use hardware wallets for large amounts</li>\n              <li>• Keep your wallet software updated</li>\n              <li>• Never share your private keys or seed phrases</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"